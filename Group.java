package students;

import java.util.Arrays;
import java.util.Comparator;
import java.util.Objects;
import java.util.Random;

public class Group {

	private String groupName;
	private Student[] students;

	public Group(String groupName) {
		super();
		students = new Student[10];
		this.groupName = groupName;
	}

	public String getGroupName() {
		return groupName;
	}

	public void setGroupName(String groupName) {
		this.groupName = groupName;
	}

	public Student[] getStudents() {
		return students;
	}

	// –ú–µ—Ç–æ–¥ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Å—Ç—É–¥–µ–Ω—Ç–∞ –≤ –≥—Ä—É–ø–ø—É. –í —Å–ª—É—á–∞–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è 11 —Å—Ç—É–¥–µ–Ω—Ç–∞ –¥–æ–ª–∂–Ω–æ
	// –±—ã—Ç—å –≤–æ–∑–±—É–∂–¥–µ–Ω–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–µ –∏—Å–∫–ª—é—á–µ–Ω–∏–µ
	public void addStudent(Student student) throws GroupOverflowException {

		for (int i = 0; i < students.length; i++) {
			if (students[i] == null) {
				students[i] = student;
//				System.out.println(student.gender.getFilePermissions() + student.getName() + " " + student.getLastName()
//						+ " –¥–æ–±–∞–≤–ª–µ–Ω –≤ –≥—Ä—É–ø–ø—É " + student.getGroupName() + "!");
				return;
			}
		}

		throw new GroupOverflowException(student.gender.getFilePermissions() + student.getName() + " "
				+ student.getLastName() + " –Ω–µ –¥–æ–±–∞–≤–ª–µ–Ω,\n–≥—Ä—É–ø–ø–∞ " + student.getGroupName() + " –ø–µ—Ä–µ–ø–æ–ª–Ω–µ–Ω–∞ :(");
	}

	// –ú–µ—Ç–æ–¥ –ø–æ–∏—Å–∫–∞ —Å—Ç—É–¥–µ–Ω—Ç–∞ –≤ –≥—Ä—É–ø–ø–µ. –ï—Å–ª–∏ —Å—Ç—É–¥–µ–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å
	// –≤–æ–∑–±—É–∂–¥–µ–Ω–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–µ –∏—Å–∫–ª—é—á–µ–Ω–∏–µ
	public Student searchStudentByLastName(String lastName) throws StudentNotFoundException {

		for (int j = 0; j < students.length; j++) {
			if (students[j] != null) {
				if (students[j].getLastName() == lastName) {
					return students[j];
				}
			}
		}
		throw new StudentNotFoundException("–°—Ç—É–¥–µ–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω,\n–∏–ª–∏ –æ–Ω –µ—â—ë –Ω–µ –¥–æ–±–∞–≤–ª–µ–Ω –≤ –≥—Ä—É–ø–ø—É :(");
	}

	// –ú–µ—Ç–æ–¥ —É–¥–∞–ª–µ–Ω–∏—è —Å—Ç—É–¥–µ–Ω—Ç–∞ –ø–æ –Ω–æ–º–µ—Ä—É –∑–∞—á–µ—Ç–∫–∏, –≤–µ—Ä–Ω—É—Ç—å true –µ—Å–ª–∏ —Ç–∞–∫–æ–π —Å—Ç—É–¥–µ–Ω—Ç
	// –±—ã–ª –∏ –æ–Ω –±—ã–ª —É–¥–∞–ª–µ–Ω –∏ false –≤ –ø—Ä–æ—Ç–∏–≤–Ω–æ–º —Å–ª—É—á–∞–µ
	public boolean removeStudentByID(int id) {

		for (int k = 0; k < students.length; k++) {
			if (students[k] != null) {
				if (students[k].getId() == id) {
					students[k] = null;
					System.out.println("–°—Ç—É–¥–µ–Ω—Ç –ø–æ –Ω–æ–º–µ—Ä—É –∑–∞—á–µ—Ç–∫–∏ " + id + " —É–¥–∞–ª—ë–Ω!");
					return true;
				}
			}
		}
		System.out.println("–°—Ç—É–¥–µ–Ω—Ç –ø–æ –Ω–æ–º–µ—Ä—É –∑–∞—á–µ—Ç–∫–∏ " + id + " –Ω–µ –Ω–∞–π–¥–µ–Ω :(");
		return false;
	}

	// –ú–µ—Ç–æ–¥ —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏ –º–∞—Å—Å–∏–≤–∞ —Å—Ç—É–¥–µ–Ω—Ç–æ–≤ –ø–æ —Ñ–∞–º–∏–ª–∏–∏
	public void sortStudentsByLastName() {
		Arrays.sort(students, Comparator.nullsFirst(new StudentsLastNameComparator()));
	}

	@Override
	// –ú–µ—Ç–æ–¥ –≤—ã–≤–æ–¥–∞ –≥—Ä—É–ø–ø—ã —Å—Ç—É–¥–µ–Ω—Ç–æ–≤
	public String toString() {
		String listOfStudents = "";
		String[] arrayOfStudents = new String[10];

		for (int i = 0; i < arrayOfStudents.length; i++) {
			if (students[i] != null)
				arrayOfStudents[i] = students[i].getLastName() + " " + students[i].getName();
			else
				arrayOfStudents[i] = "";
		}

		Arrays.sort(arrayOfStudents);
		for (int i = 0; i < arrayOfStudents.length; i++) {
			if (arrayOfStudents[i] != "") {
				listOfStudents += arrayOfStudents[i] + "\n";
			}
		}

		return listOfStudents;
	}

	// –ú–µ—Ç–æ–¥ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ñ–∞–∫—Ç–∞ –æ—Ç—Å—É—Ç—Å—Ç–≤–∏—è —ç–∫–≤–∏–≤–∞–ª–µ–Ω—Ç–Ω—ã—Ö —Å—Ç—É–¥–µ–Ω—Ç–æ–≤ –≤ –≥—Ä—É–ø–ø–µ
	public boolean checkStudentsSimilarity() {
		for (int i = 0; i < students.length; i++) {
			for (int j = i + 1; j < students.length; j++) {
				if (students[i] != null && students[j] != null) {
					if (students[i].equals(students[j])) {
						System.out.println(
								"–ü–æ—Ö–æ–∂–∏–π —Å—Ç—É–¥–µ–Ω—Ç –Ω–∞–π–¥–µ–Ω - " + students[i].getName() + " " + students[i].getLastName() + " ü§î");
						return true;

					}
				}
			}
		}
		System.out.println("–ü–æ—Ö–æ–∂–∏–π —Å—Ç—É–¥–µ–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω üëç");
		return false;
	}

	@Override
	public int hashCode() {
		final int prime = 31;
		int result = 1;
		result = prime * result + Arrays.hashCode(students);
		result = prime * result + Objects.hash(groupName);
		return result;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj)
			return true;
		if (obj == null)
			return false;
		if (getClass() != obj.getClass())
			return false;
		Group other = (Group) obj;
		return Objects.equals(groupName, other.groupName) && Arrays.equals(students, other.students);
	}
}
